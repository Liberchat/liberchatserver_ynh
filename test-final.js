#!/usr/bin/env node

/**
 * Test final des am√©liorations Jitsi LibreChat
 */

import fs from 'fs';
import path from 'path';

console.log('üß™ Test final des am√©liorations Jitsi LibreChat\n');

const requiredFiles = [
  'server.js',
  'src/components/VideoModal.tsx',
  'src/components/JitsiReturn.tsx',
  'src/utils/webview.ts',
  'src/config/jitsi.ts',
  'src/types/global.d.ts',
  'public/jitsi-return.html',
  'conf/env'
];

console.log('1. V√©rification des fichiers requis:');
let allFilesExist = true;
for (const file of requiredFiles) {
  const exists = fs.existsSync(file);
  console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
  if (!exists) allFilesExist = false;
}

if (!allFilesExist) {
  console.log('\n‚ùå Certains fichiers sont manquants !');
  process.exit(1);
}

// Test 2: V√©rifier la configuration Jitsi dans conf/env
console.log('\n2. V√©rification de la configuration:');
try {
  const envContent = fs.readFileSync('conf/env', 'utf8');
  const hasJitsiUrl = envContent.includes('JITSI_URL=');
  console.log(`   ${hasJitsiUrl ? '‚úÖ' : '‚ùå'} JITSI_URL configur√© dans conf/env`);
  
  if (hasJitsiUrl) {
    const jitsiUrlMatch = envContent.match(/JITSI_URL=(.+)/);
    if (jitsiUrlMatch) {
      console.log(`   üìç URL Jitsi: ${jitsiUrlMatch[1]}`);
    }
  }
} catch (error) {
  console.log('   ‚ùå Erreur lors de la lecture de conf/env:', error.message);
}

// Test 3: V√©rifier que l'API est ajout√©e dans server.js
console.log('\n3. V√©rification de l\'API serveur:');
try {
  const serverContent = fs.readFileSync('server.js', 'utf8');
  const hasJitsiApi = serverContent.includes('/api/jitsi-url');
  console.log(`   ${hasJitsiApi ? '‚úÖ' : '‚ùå'} Route API /api/jitsi-url pr√©sente`);
  
  const hasJitsiUrlEnv = serverContent.includes('process.env.JITSI_URL');
  console.log(`   ${hasJitsiUrlEnv ? '‚úÖ' : '‚ùå'} Utilisation de la variable d'environnement JITSI_URL`);
} catch (error) {
  console.log('   ‚ùå Erreur lors de la lecture de server.js:', error.message);
}

// Test 4: V√©rifier les imports dans VideoModal
console.log('\n4. V√©rification des composants:');
try {
  const videoModalContent = fs.readFileSync('src/components/VideoModal.tsx', 'utf8');
  const hasWebViewImport = videoModalContent.includes('from \'../utils/webview\'');
  const hasJitsiConfigImport = videoModalContent.includes('from \'../config/jitsi\'');
  
  console.log(`   ${hasWebViewImport ? '‚úÖ' : '‚ùå'} Import des utilitaires WebView`);
  console.log(`   ${hasJitsiConfigImport ? '‚úÖ' : '‚ùå'} Import de la configuration Jitsi`);
} catch (error) {
  console.log('   ‚ùå Erreur lors de la lecture de VideoModal.tsx:', error.message);
}

// Test 5: V√©rifier le build
console.log('\n5. V√©rification du build:');
const distExists = fs.existsSync('dist');
console.log(`   ${distExists ? '‚úÖ' : '‚ùå'} Dossier dist pr√©sent`);

if (distExists) {
  const indexExists = fs.existsSync('dist/index.html');
  const assetsExists = fs.existsSync('dist/assets');
  console.log(`   ${indexExists ? '‚úÖ' : '‚ùå'} index.html g√©n√©r√©`);
  console.log(`   ${assetsExists ? '‚úÖ' : '‚ùå'} Assets g√©n√©r√©s`);
}

// Test 6: V√©rifier la page de retour Jitsi
console.log('\n6. V√©rification de la page de retour:');
try {
  const returnPageContent = fs.readFileSync('public/jitsi-return.html', 'utf8');
  const hasSessionStorage = returnPageContent.includes('sessionStorage');
  const hasCountdown = returnPageContent.includes('countdown');
  
  console.log(`   ${hasSessionStorage ? '‚úÖ' : '‚ùå'} Gestion sessionStorage`);
  console.log(`   ${hasCountdown ? '‚úÖ' : '‚ùå'} Compte √† rebours`);
} catch (error) {
  console.log('   ‚ùå Erreur lors de la lecture de jitsi-return.html:', error.message);
}

console.log('\nüéâ Tests termin√©s !');
console.log('\nüìã R√©sum√© des am√©liorations:');
console.log('   ‚Ä¢ API serveur /api/jitsi-url ajout√©e');
console.log('   ‚Ä¢ D√©tection WebView am√©lior√©e');
console.log('   ‚Ä¢ Configuration Jitsi optimis√©e par environnement');
console.log('   ‚Ä¢ Page de retour d√©di√©e');
console.log('   ‚Ä¢ Composants React am√©lior√©s');
console.log('   ‚Ä¢ Types TypeScript ajout√©s');
console.log('   ‚Ä¢ Build fonctionnel');

console.log('\nüöÄ Pour tester:');
console.log('   npm start');
console.log('   curl http://localhost:3000/api/jitsi-url');